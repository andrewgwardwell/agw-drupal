<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Awardwell
 * Date: 3/16/13
 * Time: 12:54 PM
 * To change this template use File | Settings | File Templates.
 */

/**
 * @param $term
 * @param $vid
 * @param int $parent
 *
 * function for adding terms that are parent to child relationship centric
 */

function ent_taxonomy_add_term($term, $vid, $parent = 0){

  $t = new stdClass();
  $t->name = $term['name'];
  if (array_key_exists('description', $term)) {
    $t->description = $term['description'];
  }
  $t->parent = $parent;
  $t->vid = $vid;
  if (array_key_exists('weight', $term)) {
    $t->weight = $term['weight'];
  }
  // if exists, update
  if (array_key_exists('tid', $term))
    $t->tid = $term['tid'];

  taxonomy_term_save($t);

  if (isset($term['children'])) {
    foreach ($term['children'] as $child){
      ent_taxonomy_add_term($child, $vid, $t->tid);
    }
  }
  unset($t);
}

function ent_util_menu(){
  $items = array();
  $items['api/formatted-nodes'] = array(
    'title' => 'formatted-api-nodes',
    'page callback' => 'ent_util_node_output',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

function ent_util_node_output(){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'ent_project')
  // ->propertyCondition('status', NODE_PUBLISHED)
  // ->fieldCondition('field_news_types', 'value', 'spotlight', '=')
  // // See the comment about != NULL above.
  // ->fieldCondition('field_photo', 'fid', 'NULL', '!=')
  // ->fieldCondition('field_faculty_tag', 'tid', $value)
  // ->fieldCondition('field_news_publishdate', 'value', $year . '%', 'like')
  // ->fieldOrderBy('field_photo', 'fid', 'DESC')
  // ->range(0, 10)
  // Run the query as user 1.
  ->addMetaData('account', user_load(1));
  $result = $query->execute();

  if (isset($result['node'])) {
    $node_nids = array_keys($result['node']);
    $nodes = ent_util_clean_up(entity_load('node', $node_nids));
  } 

  drupal_json_output($nodes);
  die();
}

function ent_util_clean_up($nodes){
  $new_nodes = array();
  foreach ($nodes as $key => $node) {
    # code...
    $n_n = $node;
    $n_n = entity_metadata_wrapper('node', $node);
    // drupal_json_output(var_dump());
    // die();
    $node->field_image = file_create_url($n_n->field_image->value()['uri']);
    $node->content = $n_n->body->value()['value'];
    $terms = prune_to_terms(entity_load('taxonomy_term', $node->field_skill_category['und']));
    $node->terms = $terms;
    // // $n_n->field_image = ;
    $new_nodes[] = $node;
  }
  return $new_nodes;
}

function ent_util_clean_up_single($node){
  # code...
  $new_node = new stdClass();
  $n_n = $node;
  $n_n = entity_metadata_wrapper('node', $node);
  $new_node->title = $n_n->label();
  $new_node->field_image = file_create_url($n_n->field_image->value()['uri']);
  $new_node->content = $n_n->body->value()['value'];
  // $terms = prune_to_terms(entity_load('taxonomy_term', $node->field_skill_category['und']));
  // $node->terms = $terms;
  $new_node->field_gallery_images = fix_gallery_images($n_n->field_gallery_image->value());
  

  return $new_node;
}

function prune_to_terms($raw_terms){
  $terms = array();
  foreach ($raw_terms as $key => $t) {
    $terms[] = array(
      'tid' =>  $t->tid,
      'name' => $t->name
    );
    # code...
  }
  return $terms;
}

function fix_gallery_images($images){
  foreach ($images as $key => $t) {
    $is[] = array(
      'title' =>  $t['title'],
      'image' => file_create_url($t['uri'])
    );
    # code...
  }
  return $is;
}

function ent_util_services_request_postprocess_alter($controller, $args, &$result){
  // preprocess node retrvieval
  if($controller['callback'] === '_node_resource_retrieve'){
    $result = ent_util_clean_up_single($result);
  }
}


function ent_util_image_default_styles() {
  $styles = array();
  $styles['home_page_work_320w_180h'] = array(
      'name' => 'home_page_work_320w_180h',
      'effects' => array(
        6 => array(
          'label' => 'Scale and crop',
          'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
          'effect callback' => 'image_scale_and_crop_effect',
          'dimensions callback' => 'image_resize_dimensions',
          'form callback' => 'image_resize_form',
          'summary theme' => 'image_resize_summary',
          'module' => 'image',
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => '320',
            'height' => '180',
          ),
          'weight' => '1',
        ),
      ),
  );
  $styles['home_page_work_480w_270h'] = array(
    'name' => 'home_page_work_480w_270h',
    'effects' => array(
      6 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '480',
          'height' => '270',
        ),
        'weight' => '1',
      ),
    ),
  );

  $styles['front_page_image'] = array(
    'name' => 'front_page_image',
    'effects' => array(
      6 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_crop',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '1240',
          'height' => '620',
        ),
        'weight' => '1',
      ),
    ),
  );
  $styles['slide_thumbcrop_image'] = array(
    'name' => 'slide_thumbcrop_image',
    'effects' => array(
      6 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_crop',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '160',
          'height' => '160',
        ),
        'weight' => '1',
      ),
    ),
  );
  return $styles;
}
